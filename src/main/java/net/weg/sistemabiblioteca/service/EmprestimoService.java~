package net.weg.sistemabiblioteca.service;

import net.weg.sistemabiblioteca.controller.dto.request.EmprestimoRequestDTO;
import net.weg.sistemabiblioteca.controller.dto.response.EmprestimoResponseDTO;
import net.weg.sistemabiblioteca.controller.dto.response.LivroResponseDTO;
import net.weg.sistemabiblioteca.controller.dto.response.UsuarioResponseDTO;
import net.weg.sistemabiblioteca.entity.Emprestimo;
import net.weg.sistemabiblioteca.entity.Livro;
import net.weg.sistemabiblioteca.entity.Usuario;
import net.weg.sistemabiblioteca.repository.EmprestimoRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

/**
 * Serviço responsável pelo gerenciamento de empréstimos.
 */
@Service
public class EmprestimoService {

    private final EmprestimoRepository repository;
    private final UsuarioService usuarioService;
    private final LivroService livroService;


    public EmprestimoService(EmprestimoRepository repository, UsuarioService usuarioService, LivroService livroService) {
        this.repository = repository;
        this.usuarioService = usuarioService;
        this.livroService = livroService;
    }

    public EmprestimoResponseDTO create(EmprestimoRequestDTO emprestimoRequestDTO) {
        Emprestimo emprestimo = repository.save(toEntity(emprestimoRequestDTO));
        return emprestimo.toDto();
    }

    public EmprestimoResponseDTO update(EmprestimoRequestDTO emprestimo, Integer id) {
        Emprestimo emprestimoNovo = toEntity(emprestimo);
        emprestimoNovo.setId(id);
        repository.save(emprestimoNovo);
        return emprestimoNovo.toDto();
    }

    public void delete(Integer id) {
        repository.deleteById(id);
    }

    public EmprestimoResponseDTO findById(Integer id) {
        Emprestimo emprestimo = repository.findById(id).orElseThrow(NoSuchElementException::new);
        return emprestimo.toDto();
    }

    public List<EmprestimoResponseDTO> findAll() {
        return repository.findAll().stream().map(Emprestimo::toDto).collect(Collectors.toList());
    }

    /**
     * Converte um DTO de empréstimo para entidade, buscando as entidades `Usuario` e `Livro`.
     */
    private Emprestimo toEntity(EmprestimoRequestDTO emprestimo) {
        Usuario usuario = usuarioService.findEntityById(emprestimo.usuarioId());
        Livro livro = livroService.findEntityById(emprestimo.livroId());

        return Emprestimo.builder()
                .usuario(usuario)
                .livro(livro)
                .dataEmprestimo(emprestimo.dataEmprestimo())
                .dataDevolucao(emprestimo.dataDevolucao())
                .build();
    }


}

